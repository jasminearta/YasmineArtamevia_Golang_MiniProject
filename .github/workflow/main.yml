name: workflows

on:
  push:
    branches:
      - main

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Checkout the code
  #     - name: Checkout the code
  #       uses: actions/checkout@v2

  #     # Setup Go environment
  #     - name: Setup Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: '1.21'

  #     # Run tests
  #     - name: Run Tests
  #       run: go test -v ./...

  build-and-push-docker:
    runs-on: ubuntu-latest
    # needs: test
    steps:
      # Checkout the code
      - name: Checkout the code
        uses: actions/checkout@v2

      # Create .env file from secret
      - name: Create .env file
        run: echo "${{ secrets.ENV }}" > .env

      # Login to Docker Hub
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Build Docker image
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USER }}/jessie_miniproject:latest .

      # Push Docker image to Docker Hub
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USER }}/jessie_miniproject:latest

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    env:
      IMAGE_URI: '${{ secrets.DOCKER_USER }}/jessie_miniproject:latest'
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}

    steps:
      # Checkout the code
      - name: Checkout the Code
        uses: actions/checkout@v2

      # Create PEM file from secret
      - name: Create PEM File
        run: |
          echo "${{ secrets.EC2_PEM }}" > ec2-key.pem
          chmod 600 ec2-key.pem

      # Deploy to EC2
      - name: Deploy to EC2
        run: |
          ssh -i ec2-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
            # Stop and remove the current container if running
            CONTAINER_ID=\$(sudo docker ps -q --filter "name=jessie_miniproject")
            if [ -n "\$CONTAINER_ID" ]; then
              sudo docker stop \$CONTAINER_ID
              sudo docker rm \$CONTAINER_ID
            fi

            # Remove dangling images to free up space
            sudo docker images -f "dangling=true" -q | xargs -r sudo docker rmi

            # Pull the latest image from Docker Hub
            sudo docker pull $IMAGE_URI

            # Run the new container
            sudo docker run -d --name jessie_miniproject -p 8080:8080 $IMAGE_URI
          EOF

      # Clean up PEM file
      - name: Clean up PEM File
        run: rm -f ec2-key.pemx